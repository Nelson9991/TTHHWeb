@page "/centroscosto"
@using TTHHWeb.Shared.Models.CentroCosto;
@inject IHttpRepository HttpRepository
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@attribute [Authorize]

<MudButton Color="Color.Secondary" Variant="Variant.Filled"
           EndIcon="@Icons.Material.Filled.Add" Href="/centroscosto/create"
           Class="mb-3">
  Agregar Nuevo
</MudButton>

<MudDataGrid T="CentroCostoDto" Items="@_centroCostoList" Virtualize="true" SortMode="SortMode.Single"
             QuickFilter="@_quickFilter" Filterable="true">
  <ToolBarContent>
    <MudText Typo="Typo.h6">Centros de Costos</MudText>
    <MudSpacer />
    <MudTextField @bind-Value="_searchString" Placeholder="Buscar" Adornment="Adornment.Start" Immediate="true"
                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
  </ToolBarContent>
  <Columns>
    <PropertyColumn Property="x => x.Codigo" Title="Código" />
    <PropertyColumn Property="x => x.NombreCentroCostos" Title="Nombre" />
    <TemplateColumn Filterable="false" Sortable="false"
                    CellClass="d-flex justify-end">
      <CellTemplate>
        <MudStack Row>
          <MudButton Color="Color.Info" Variant="Variant.Filled"
                     Href=@($"/centroscosto/edit/{context.Item.Codigo}")>
            Editar
          </MudButton>
          <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="@(() => DeleteCentroCosto(context.Item.Codigo))">Eliminar</MudButton>
        </MudStack>
      </CellTemplate>
    </TemplateColumn>
  </Columns>
  <PagerContent>
    <MudDataGridPager T="CentroCostoDto" />
  </PagerContent>
</MudDataGrid>

@code {
  private List<CentroCostoDto> _centroCostoList = new();
  private string _searchString = string.Empty;

  protected override async Task OnInitializedAsync()
  {
    var httpResp = await HttpRepository.GetFromJsonAsync<List<CentroCostoDto>>("api/centroCosto");
    if (httpResp.Error || httpResp.Response is null)
    {
      Snackbar.Add(await httpResp.GetResponseBodyAsync(), Severity.Error);
      return;
    }

    _centroCostoList = httpResp.Response;
  }

  // quick filter - filter gobally across multiple columns with the same input
  private Func<CentroCostoDto, bool> _quickFilter => x =>
  {
    if (string.IsNullOrWhiteSpace(_searchString))
      return true;

    if (x.Codigo.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
      return true;

    if (x.NombreCentroCostos.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
      return true;

    return false;
  };

  private async Task DeleteCentroCosto(int codigoCosto)
  {
    var options = new DialogOptions { CloseOnEscapeKey = true };
    var parameters = new DialogParameters<ConfirmActionDialog> { { x => x.DialogContet, "¿Está seguro de eliminar este registro?" } };
    var dialog = await DialogService.ShowAsync<ConfirmActionDialog>("Eliminar Centro Costo", parameters, options);

    var result = await dialog.Result;

    if (!result.Canceled)
    {
      var httpResp = await HttpRepository.Delete($"api/centroCosto/eliminar/{codigoCosto}");
      var responseBody = await httpResp.GetResponseBodyAsync();

      if (httpResp.Error)
      {
        Snackbar.Add(responseBody, Severity.Error);
        return;
      }

      Snackbar.Add(responseBody, Severity.Success);
    }
  }
}
